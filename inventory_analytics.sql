-- =====================================================
-- CONSULTAS ANALÍTICAS PARA FACT_INVENTORY
-- =====================================================

USE SCHEMA DWH;

-- =====================================================
-- 1. ANÁLISES DE ESTOQUE ATUAL
-- =====================================================

-- Estoque atual por depósito e categoria
SELECT 
  dw.WAREHOUSE_NAME,
  dp.CATEGORY,
  COUNT(DISTINCT dp.PRODUCT_SK) AS TOTAL_PRODUCTS,
  SUM(current_stock.FINAL_STOCK) AS TOTAL_UNITS,
  SUM(current_stock.FINAL_VALUE) AS TOTAL_VALUE,
  AVG(current_stock.FINAL_STOCK) AS AVG_UNITS_PER_PRODUCT
FROM DIM_WAREHOUSE dw
JOIN (
  SELECT 
    fi.WAREHOUSE_SK,
    fi.PRODUCT_SK,
    SUM(fi.QUANTITY_CHANGE) AS FINAL_STOCK,
    SUM(fi.QUANTITY_CHANGE) * 
    (SUM(CASE WHEN fi.QUANTITY_CHANGE > 0 THEN fi.TOTAL_COST ELSE 0 END) / 
     NULLIF(SUM(CASE WHEN fi.QUANTITY_CHANGE > 0 THEN fi.QUANTITY_CHANGE ELSE 0 END), 0)) AS FINAL_VALUE
  FROM FACT_INVENTORY fi
  GROUP BY fi.WAREHOUSE_SK, fi.PRODUCT_SK
  HAVING SUM(fi.QUANTITY_CHANGE) > 0
) current_stock ON current_stock.WAREHOUSE_SK = dw.WAREHOUSE_SK
JOIN DIM_PRODUCT dp ON dp.PRODUCT_SK = current_stock.PRODUCT_SK
GROUP BY dw.WAREHOUSE_SK, dw.WAREHOUSE_NAME, dp.CATEGORY
ORDER BY TOTAL_VALUE DESC;

-- =====================================================
-- 2. ANÁLISE DE MOVIMENTAÇÃO POR PERÍODO
-- =====================================================

-- Movimentação mensal por tipo
SELECT 
  dd.YEAR,
  dd.MONTH,
  dmt.MOVEMENT_CATEGORY,
  COUNT(*) AS TOTAL_MOVEMENTS,
  SUM(ABS(fi.QUANTITY_CHANGE)) AS TOTAL_QUANTITY,
  SUM(ABS(fi.TOTAL_COST)) AS TOTAL_VALUE
FROM FACT_INVENTORY fi
JOIN DIM_DATE dd ON dd.DATE_KEY = fi.DATE_KEY
JOIN DIM_MOVEMENT_TYPE dmt ON dmt.MOVEMENT_TYPE_SK = fi.MOVEMENT_TYPE_SK
GROUP BY dd.YEAR, dd.MONTH, dmt.MOVEMENT_CATEGORY
ORDER BY dd.YEAR, dd.MONTH, dmt.MOVEMENT_CATEGORY;

-- =====================================================
-- 3. ANÁLISE DE GIRO DE ESTOQUE
-- =====================================================

-- Giro de estoque por produto (últimos 5 meses)
WITH sales_data AS (
  SELECT 
    fi.PRODUCT_SK,
    SUM(ABS(fi.QUANTITY_CHANGE)) AS TOTAL_SOLD,
    SUM(ABS(fi.TOTAL_COST)) AS TOTAL_SALES_VALUE
  FROM FACT_INVENTORY fi
  JOIN DIM_MOVEMENT_TYPE dmt ON dmt.MOVEMENT_TYPE_SK = fi.MOVEMENT_TYPE_SK
  WHERE dmt.MOVEMENT_TYPE = 'SALE'
    AND fi.MOVEMENT_TIMESTAMP >= DATEADD('month', -5, CURRENT_TIMESTAMP())
  GROUP BY fi.PRODUCT_SK
),
current_stock AS (
  SELECT 
    fi.PRODUCT_SK,
    SUM(fi.QUANTITY_CHANGE) AS STOCK_ON_HAND,
    SUM(fi.QUANTITY_CHANGE) * AVG(fi.UNIT_COST) AS STOCK_VALUE
  FROM FACT_INVENTORY fi
  GROUP BY fi.PRODUCT_SK
)
SELECT 
  dp.PRODUCT,
  dp.CATEGORY,
  cs.STOCK_ON_HAND,
  cs.STOCK_VALUE,
  COALESCE(sd.TOTAL_SOLD, 0) AS UNITS_SOLD_5M,
  COALESCE(sd.TOTAL_SALES_VALUE, 0) AS SALES_VALUE_5M,
  CASE 
    WHEN cs.STOCK_ON_HAND > 0 AND sd.TOTAL_SOLD > 0 
    THEN (sd.TOTAL_SOLD / 5.0) / cs.STOCK_ON_HAND  -- Giro mensal
    ELSE 0 
  END AS MONTHLY_TURNOVER_RATE,
  CASE 
    WHEN sd.TOTAL_SOLD > 0 
    THEN cs.STOCK_ON_HAND / (sd.TOTAL_SOLD / 5.0)  -- Meses de estoque
    ELSE 999 
  END AS MONTHS_OF_INVENTORY
FROM DIM_PRODUCT dp
JOIN current_stock cs ON cs.PRODUCT_SK = dp.PRODUCT_SK
LEFT JOIN sales_data sd ON sd.PRODUCT_SK = dp.PRODUCT_SK
WHERE cs.STOCK_ON_HAND > 0
ORDER BY MONTHLY_TURNOVER_RATE DESC;

-- =====================================================
-- 4. ANÁLISE DE FORNECEDORES
-- =====================================================

-- Performance dos fornecedores por valor de compra
SELECT 
  ds.SUPPLIER_NAME,
  ds.STATE,
  COUNT(*) AS TOTAL_PURCHASES,
  SUM(fi.QUANTITY_CHANGE) AS TOTAL_UNITS_PURCHASED,
  SUM(fi.TOTAL_COST) AS TOTAL_PURCHASE_VALUE,
  AVG(fi.UNIT_COST) AS AVG_UNIT_COST,
  COUNT(DISTINCT dp.PRODUCT_SK) AS PRODUCTS_SUPPLIED
FROM FACT_INVENTORY fi
JOIN DIM_SUPPLIER ds ON ds.SUPPLIER_SK = fi.SUPPLIER_SK
JOIN DIM_MOVEMENT_TYPE dmt ON dmt.MOVEMENT_TYPE_SK = fi.MOVEMENT_TYPE_SK
JOIN DIM_PRODUCT dp ON dp.PRODUCT_SK = fi.PRODUCT_SK
WHERE dmt.MOVEMENT_TYPE = 'PURCHASE'
  AND ds.SUPPLIER_SK <> -1  -- Excluir Unknown
GROUP BY ds.SUPPLIER_SK, ds.SUPPLIER_NAME, ds.STATE
ORDER BY TOTAL_PURCHASE_VALUE DESC;

-- =====================================================
-- 5. ANÁLISE DE TRANSFERÊNCIAS ENTRE DEPÓSITOS
-- =====================================================

-- Fluxo de transferências entre depósitos
WITH transfers_out AS (
  SELECT 
    dw.WAREHOUSE_NAME AS SOURCE_WAREHOUSE,
    fi.REFERENCE_ID,
    dp.PRODUCT,
    ABS(fi.QUANTITY_CHANGE) AS QUANTITY,
    ABS(fi.TOTAL_COST) AS VALUE
  FROM FACT_INVENTORY fi
  JOIN DIM_WAREHOUSE dw ON dw.WAREHOUSE_SK = fi.WAREHOUSE_SK
  JOIN DIM_PRODUCT dp ON dp.PRODUCT_SK = fi.PRODUCT_SK
  JOIN DIM_MOVEMENT_TYPE dmt ON dmt.MOVEMENT_TYPE_SK = fi.MOVEMENT_TYPE_SK
  WHERE dmt.MOVEMENT_TYPE = 'TRANSFER_OUT'
),
transfers_in AS (
  SELECT 
    dw.WAREHOUSE_NAME AS TARGET_WAREHOUSE,
    fi.REFERENCE_ID,
    dp.PRODUCT,
    fi.QUANTITY_CHANGE AS QUANTITY,
    fi.TOTAL_COST AS VALUE
  FROM FACT_INVENTORY fi
  JOIN DIM_WAREHOUSE dw ON dw.WAREHOUSE_SK = fi.WAREHOUSE_SK
  JOIN DIM_PRODUCT dp ON dp.PRODUCT_SK = fi.PRODUCT_SK
  JOIN DIM_MOVEMENT_TYPE dmt ON dmt.MOVEMENT_TYPE_SK = fi.MOVEMENT_TYPE_SK
  WHERE dmt.MOVEMENT_TYPE = 'TRANSFER_IN'
)
SELECT 
  tout.SOURCE_WAREHOUSE,
  tin.TARGET_WAREHOUSE,
  tout.PRODUCT,
  tout.QUANTITY,
  tout.VALUE,
  tout.REFERENCE_ID AS TRANSFER_ID
FROM transfers_out tout
JOIN transfers_in tin ON tin.REFERENCE_ID = tout.REFERENCE_ID 
                     AND tin.PRODUCT = tout.PRODUCT
ORDER BY tout.VALUE DESC;

-- =====================================================
-- 6. ANÁLISE DE PERDAS E AJUSTES
-- =====================================================

-- Análise de ajustes de inventário
SELECT 
  dw.WAREHOUSE_NAME,
  dp.PRODUCT,
  dp.CATEGORY,
  COUNT(*) AS TOTAL_ADJUSTMENTS,
  SUM(fi.QUANTITY_CHANGE) AS NET_ADJUSTMENT_QUANTITY,
  SUM(fi.TOTAL_COST) AS NET_ADJUSTMENT_VALUE,
  SUM(CASE WHEN fi.QUANTITY_CHANGE > 0 THEN fi.TOTAL_COST ELSE 0 END) AS POSITIVE_ADJUSTMENTS,
  SUM(CASE WHEN fi.QUANTITY_CHANGE < 0 THEN fi.TOTAL_COST ELSE 0 END) AS NEGATIVE_ADJUSTMENTS
FROM FACT_INVENTORY fi
JOIN DIM_WAREHOUSE dw ON dw.WAREHOUSE_SK = fi.WAREHOUSE_SK
JOIN DIM_PRODUCT dp ON dp.PRODUCT_SK = fi.PRODUCT_SK
JOIN DIM_MOVEMENT_TYPE dmt ON dmt.MOVEMENT_TYPE_SK = fi.MOVEMENT_TYPE_SK
WHERE dmt.MOVEMENT_CATEGORY = 'ADJUSTMENT'
  AND fi.REFERENCE_ID <> 'INITIAL_STOCK'  -- Excluir estoque inicial
GROUP BY dw.WAREHOUSE_SK, dw.WAREHOUSE_NAME, dp.PRODUCT_SK, dp.PRODUCT, dp.CATEGORY
HAVING COUNT(*) > 0
ORDER BY ABS(NET_ADJUSTMENT_VALUE) DESC;

-- =====================================================
-- 7. ANÁLISE TEMPORAL DE ESTOQUE
-- =====================================================

-- Evolução do valor do estoque por mês
SELECT 
  dd.YEAR,
  dd.MONTH,
  dw.WAREHOUSE_NAME,
  SUM(fi.RUNNING_VALUE) AS MONTH_END_STOCK_VALUE,
  COUNT(DISTINCT fi.PRODUCT_SK) AS PRODUCTS_IN_STOCK
FROM FACT_INVENTORY fi
JOIN DIM_DATE dd ON dd.DATE_KEY = fi.DATE_KEY
JOIN DIM_WAREHOUSE dw ON dw.WAREHOUSE_SK = fi.WAREHOUSE_SK
WHERE fi.MOVEMENT_TIMESTAMP = (
  -- Última movimentação do produto no mês
  SELECT MAX(fi2.MOVEMENT_TIMESTAMP)
  FROM FACT_INVENTORY fi2
  WHERE fi2.WAREHOUSE_SK = fi.WAREHOUSE_SK
    AND fi2.PRODUCT_SK = fi.PRODUCT_SK
    AND YEAR(fi2.MOVEMENT_TIMESTAMP) = dd.YEAR
    AND MONTH(fi2.MOVEMENT_TIMESTAMP) = dd.MONTH
)
GROUP BY dd.YEAR, dd.MONTH, dw.WAREHOUSE_SK, dw.WAREHOUSE_NAME
ORDER BY dd.YEAR, dd.MONTH, dw.WAREHOUSE_NAME;

-- =====================================================
-- 8. DASHBOARD EXECUTIVO - MÉTRICAS PRINCIPAIS
-- =====================================================

-- Métricas principais do estoque
SELECT 
  'TOTAL_STOCK_VALUE' AS METRIC,
  SUM(current_stock.FINAL_VALUE) AS VALUE
FROM (
  SELECT 
    SUM(fi.QUANTITY_CHANGE) * AVG(fi.UNIT_COST) AS FINAL_VALUE
  FROM FACT_INVENTORY fi
  GROUP BY fi.WAREHOUSE_SK, fi.PRODUCT_SK
  HAVING SUM(fi.QUANTITY_CHANGE) > 0
) current_stock

UNION ALL

SELECT 
  'TOTAL_PRODUCTS_IN_STOCK',
  COUNT(*)
FROM (
  SELECT 1
  FROM FACT_INVENTORY fi
  GROUP BY fi.WAREHOUSE_SK, fi.PRODUCT_SK
  HAVING SUM(fi.QUANTITY_CHANGE) > 0
) products_with_stock

UNION ALL

SELECT 
  'TOTAL_MOVEMENTS_LAST_30_DAYS',
  COUNT(*)
FROM FACT_INVENTORY fi
WHERE fi.MOVEMENT_TIMESTAMP >= DATEADD('day', -30, CURRENT_TIMESTAMP())

UNION ALL

SELECT 
  'TOTAL_ADJUSTMENTS_VALUE',
  SUM(ABS(fi.TOTAL_COST))
FROM FACT_INVENTORY fi
JOIN DIM_MOVEMENT_TYPE dmt ON dmt.MOVEMENT_TYPE_SK = fi.MOVEMENT_TYPE_SK
WHERE dmt.MOVEMENT_CATEGORY = 'ADJUSTMENT'
  AND fi.REFERENCE_ID <> 'INITIAL_STOCK'

ORDER BY METRIC; 